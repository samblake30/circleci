version: 2.1

orbs:
  aws-cli: circleci/aws-cli@5.4.1

executors:
  docker-build-exec:
    working_directory: /home/circleci/opt/project
    docker:
      - image: cimg/python:3.11
    resource_class: medium

commands:
  docker-build:
    description: "Check and build the dockerfile"
    parameters:
      image_name:
        type: string
        description: "The name of the docker image"
      tag_name:
        type: string
        description: "Tha tag to use for build"
        default: "latest"
    steps:
      - run:
          name: Build Docker Image
          command: |
            cd << parameters.image_name >>
            if [ -f Dockerfile ]; then
              docker build -t << parameters.image_name >>:<< parameters.tag_name >> .
              BUILT_IMAGE=$(docker images << parameters.image_name >>:<< parameters.tag_name >>)
              echo "export BUILT_IMAGE=\"$BUILT_IMAGE\"" >> $BASH_ENV
            else
              echo "No Dockerfile found"
            fi
  pr-comment:
    description: Comment on PR with necessary details
    parameters:
      body:
        type: string
        description: "Body of the PR to use"
    steps:
      - run:
          name: Update the build status to Open PR
          command: |
            echo "Posting details for the built image to PR"
            
            pr_response=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls)
            
            # Extract PR comment URL
            pr_comment_url=$(echo "$pr_response" | jq -r ".[0]._links.comments.href")
            
            # Create comment body JSON
            comment_body=$(echo -e "<< parameters.body >>" | jq -Rs .)
            
            # Post comment
            comment_response=$(curl -sSL -X POST "$pr_comment_url" \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -d "{\"body\": $comment_body}")
            
            echo "✅ Comment posted successfully to PR."
  cleanup:
    description: "Cleanup Images"
    steps:
      - run:
          name: Cleanup Images
          command: |
            # Fallback cleanup for older Docker API versions
            sleep 10
            echo $IMAGE_NAME
            # Check if IMAGE_NAME exists before attempting removal
            if [ ! -z "$IMAGE_NAME" ]; then
                docker images $IMAGE_NAME -q | xargs -r docker rmi -f
            else
                echo "No image name provided for cleanup"
            fi


jobs:
  build-image:
    executor: docker-build-exec
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: List changed files in PR
          command: |
            git fetch origin main
            IMAGE_NAME=$(git diff --name-only origin/main...$CIRCLE_BRANCH | xargs -n1 dirname | head -1)
            echo "export IMAGE_NAME=$IMAGE_NAME" >> $BASH_ENV
            echo $IMAGE_NAME
      - docker-build:
          image_name: "${IMAGE_NAME}"
          tag_name: "latest"
      - pr-comment:
          body: |
            _**Automated update:**_
            🐳 Docker Image 
            \`\`\`bash
            $BUILT_IMAGE
            \`\`\`
      - run:
          name: Create workspace directory
          command: |
            mkdir -p workspace
            cp $BASH_ENV workspace/.bash_env
      - persist_to_workspace:
          root: workspace
          paths:
            - .bash_env

  ecr-image_upload:
    executor: docker-build-exec
    steps:
      - attach_workspace:
          at: workspace
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Load environment variables
          command: |
            if [ -f workspace/.bash_env ]; then
              cat workspace/.bash_env >> $BASH_ENV
              source $BASH_ENV
            fi
      - aws-cli/setup
      - run:
          name: check AWS CLI and other details
          command: |
            aws sts get-caller-identity
            aws configure list
            aws ecr describe-repositories
      - run:
          name: Create/check Repository
          command: |
            aws ecr describe-repositories --repository-names $IMAGE_NAME || aws ecr create-repository --repository-name $IMAGE_NAME
      - run:
          name: Push the Image to ECR
          command: |
            docker tag $IMAGE_NAME:latest 322994608675.dkr.ecr.ap-south-1.amazonaws.com/$IMAGE_NAME:latest
            docker push 322994608675.dkr.ecr.ap-south-1.amazonaws.com/$IMAGE_NAME:latest

workflows:
  build:
    jobs:
      - build-image:
          context: ctx-ci
          filters:
            branches:
              ignore:
                - main
      - ecr-image_upload:
          context: ctx-ci
          requires:
            - build-image
          filters:
            branches:
              ignore:
                - main